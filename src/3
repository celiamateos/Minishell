/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   init_tree.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: daviles- <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/11/10 18:57:40 by daviles-          #+#    #+#             */
/*   Updated: 2023/11/18 21:40:23 by daviles-         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */
#include "../include/minishell.h"

void print_preorder(t_tree *node) 
{
	t_token	*token;

	if (node != NULL) 
	{
		token = (*node)->content;
       		printf("%s\n", token->value);
	        print_preorder(node->left);
	        print_preorder(node->right);
    	}
}

t_tree	new_leaf(t_token *token)
{
	t_tree	*leaf;

	if (!token)
		return (NULL);
	leaf = malloc(sizeof(t_tree));
	leaf->content = token;
	leaf->left = NULL;
	leaf->right = NULL;
	return (leaf);
}

void	insert_leaf(t_tree *tree, t_token_list *token)
{
	t_token	*token;
	t_tree	*leaf;
	t_tree	*aux_leaf;

	if (token_list == NULL)
		return ;
	token = (*token_list)->content;
	if (token->type == 0)
	{
		if (tree->left == NULL)
			tree->left = new_leaf(token_list->content);
		else
			insert_leaf(tree->left, token_list);
	}
	else if (token->type == 1)
	{
		leaf = new_leaf(token_list->content);

		if (tree->left != NULL)
			leaf->left = tree->left;
		tree = leaf;
/*		aux_leaf = tree;
		while (aux_leaf->left)
			aux_leaf = aux_leaf->left;
		leaf->left = aux_leaf;
		tree->left = leaf;
*/
	}
	else if (token->type == 2)
	{

	}
}

void	init_tree(t_dlist *tokens)
{
	t_tree	*tree_node;
	t_tree	*root;
	t_token	*token;

	root = NULL;
/*	tree_node = new_leaf(tokens->content);
	tokens = tokens->next;
	root = tree_node;
	while (tokens)
	{
		token = tokens->content;
		if (token->type == PIPE)
		{
			root = new_leaf(tokens->content);
			add_left_tree(root, tree_node);
		}
		else if (token->type == CMD)
		{
			//go next token and check if is operator
			tree_node = new_leaf(tokens->content);
		}
		tokens = tokens->next;
	}
*/	while (tokens)
	{
		token = tokens->content;
		if (token->type == PIPE)
		{
			root = new_leaf(tokens->content);
			add_left_tree(root, tree_node);
		}
		else if (token->type == CMD)
		{
			//go next token and check if is operator
			tree_node = new_leaf(tokens->content);
		}
		tokens = tokens->next;
	}
}
